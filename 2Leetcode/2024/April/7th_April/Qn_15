//QuestionLink:  https://leetcode.com/problems/3sum/description/

//JavaCode::

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;

        Arrays.sort(nums);

        Set<List<Integer>> list = new HashSet<>(); //to remove duplicate list

        for(int i=0; i<n; i++){
          int left = i+1, right = n-1; //two pointer for taking sum

          while(left < right){
            int sum = nums[i] + nums[left] + nums[right]; //for triplet = 0

            if(sum == 0){
              list.add(Arrays.asList(nums[i], nums[left], nums[right])); //find more triplet
              left++;
              right--;
            }else{
              if(sum<0){  //try to add greater element to get 0
                left++;
              }else{
                right--;
              }
            }
          }
        }
        return new ArrayList<>(list);
    }
}
