//QuestionLink:  https://leetcode.com/problems/subarrays-with-k-different-integers/description/

//Java code:  

class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return calcsubarray(nums,k)-calcsubarray(nums,k-1);
    }
    public int calcsubarray(int[] nums, int k) {

        HashMap<Integer,Integer> map = new HashMap<>();

        int n = nums.length;
        int i = 0;
        int j = 0;
        int ans = 0;
        
        while(j<n){
            map.put(nums[j],map.getOrDefault(nums[j],0)+1);
            if (map.size() > k) {
                while (map.size() > k) {
                    map.put(nums[i], map.get(nums[i]) - 1);
                    if (map.get(nums[i]) == 0)
                        map.remove(nums[i]);
                    i++;
                }
            }
            ans = ans + j - i + 1;
            j++;
        }
        return ans;
    }
}
