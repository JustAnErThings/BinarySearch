------------QuestionLink----------
https://leetcode.com/problems/next-greater-element-i/

----------Code------------------

//----------OPTIMAL-----------
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int[] ans = new int[m];

        HashMap<Integer,Integer> map = new HashMap<>();
        Stack<Integer> st = new Stack<>();

        for(int i=0; i<n; i++){
          while (!st.isEmpty() && nums2[i] > st.peek()) {
                map.put(st.pop(), nums2[i]);
            }
            st.push(nums2[i]);
        }
        while(!st.isEmpty()){
          map.put(st.pop(),-1);
        }
        for(int i=0; i<m; i++){
          ans[i] = map.get(nums1[i]);
        }
        return ans;
    }
}


// ------------BETTER----------------

        int m = nums1.length;
        int n = nums2.length;
        int[] ans = new int[m];

        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<n; i++){
            map.put(nums2[i],i);
        }

        for(int i=0; i<m; i++){
            for(int j=map.get(nums1[i]); j<n; j++){
               if(nums2[j]>nums1[i]){
                ans[i] = nums2[j];
                break;
               }
            }
        }
        for(int i=0; i<ans.length; i++){
            if(ans[i] == 0){
                ans[i] = -1;
            }
        }
        return ans;

//-------------------BRITE-----------------

   int m = nums1.length;
        int n = nums2.length;
        int[] ans = new int[m];

        for(int i=0; i<m; i++){
            boolean found = false;
            for(int j=0; j<n; j++){
                if(nums1[i] == nums2[j]){
                    found = true;
                }
               if(found && nums2[j]>nums1[i]){
                ans[i] = nums2[j];
                break;
               }
            }
        }
        for(int i=0; i<ans.length; i++){
            if(ans[i] == 0){
                ans[i] = -1;
            }
        }
        return ans;
