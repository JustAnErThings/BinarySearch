package com.rk.Java_Basics.BinarySearch;
//https://leetcode.com/problems/search-in-rotated-sorted-array/
public class RBS {
    public static void main(String[] args) {
        int[] arr = {4,5,6,7,0,1,2,3};
        int target = 3;
        System.out.println(arr.length);
        int ans = rotatedSearch(arr,target);
        System.out.println(ans);
    }
    public int search(int[] arr, int target) {
        int pivot = pivotIndex(arr);
        if(pivot == -1){
            return bSearch(arr, target, 0, arr.length-1);
        }
        if(arr[pivot] == target){
            return pivot;
        }
        if(target >= arr[0]){
            return bSearch(arr, target, 0, pivot-1);
        }  else {
            return bSearch(arr, target, pivot+1, arr.length-1);
        }
    }
    public int  pivotIndex(int[] arr) {
        int start = 0;
        int end = arr.length-1;
        while (start < end){
            int mid = start + (end - start) / 2;

            if (mid < end && arr[mid] > arr[mid+1]){
                return mid;
            } else if (mid > start && arr[mid] < arr[mid-1]){
                return mid-1;
            } else if (arr[mid] <= arr[start]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }


        return -1;
    }
    public int bSearch(int[] arr, int target, int start, int end) {
       
        while (start<=end) {
            int mid = start + (end - start) / 2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
                return mid;
            }
        }
        //if target not found return -1(target doesn't exist)
        return -1;
    }
}
