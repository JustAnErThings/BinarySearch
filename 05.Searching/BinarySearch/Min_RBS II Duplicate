package com.rk.Java_Basics.BinarySearch;
//https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/
public class Min_RBS_Duplicate {
    public static void main(String[] args) {
        int[] arr = {2,2,2,1};
        int ans = find(arr);
        System.out.println(ans);
    }
    static int find(int[] arr) {
        int pivot = pivotDuplicate(arr);
        if (pivot == -1){
            return arr[0];
        }
        return arr[pivot+1];
    }
    static int pivotDuplicate(int[] arr) {
        int start = 0;
        int end = arr.length-1;
        while (start <= end){
            int mid = start + (end - start) / 2;

            //first condition
            if (mid < end && arr[mid] > arr[mid+1]){
                return mid;
            } else if (mid > start && arr[mid] < arr[mid-1]){
                return mid-1;
            }
            if (arr[mid] == arr[start] && arr[mid] == arr[end]){
                //skip start and end
                //before skipping check if start is pivot oe not
                if (arr[start] > arr[start+1]){
                    return start;
                }
                start++;
                //before skipping check if end is pivot oe not
                if (arr[end] < arr[end-1]){
                    return end-1;
                }
                end--;
            }
            //left side is sorted, so pivot should in right
            else if (arr[start] < arr[mid] || arr[start] == arr[mid] && arr[mid] > arr[end]){
                start = mid + 1;

            }
            else {
                end = mid-1;
            }
        }
        return -1;
    }
}
