//Java Code

class Solution {
    public static int maxProfit(int n, int[] prices) {
        if (prices == null || prices.length < 2)
            return 0;

        int[] left = new int[n];
        int minPrice = prices[0];
        for (int i = 1; i < n; i++) {
            minPrice = Math.min(minPrice, prices[i]);
            left[i] = Math.max(left[i - 1], prices[i] - minPrice);
        }

        int[] right = new int[n];
        int maxPrice = prices[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            maxPrice = Math.max(maxPrice, prices[i]);
            right[i] = Math.max(right[i + 1], maxPrice - prices[i]);
        }

        int maxProfit = 0;
        // combine both profits
        for (int i = 0; i < n; i++) {
            maxProfit = Math.max(maxProfit, left[i] + (i + 1 < n ? right[i + 1] : 0));
        }

        return maxProfit;
    }
}
